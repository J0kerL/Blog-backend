<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.blog.mapper.ArticleMapper">
    <resultMap id="BaseResultMap" type="com.blog.entity.Article">
        <id column="id" property="id"/>
        <result column="title" property="title"/>
        <result column="content" property="content"/>
        <result column="summary" property="summary"/>
        <result column="cover" property="cover"/>
        <result column="category_id" property="categoryId"/>
        <result column="author_id" property="authorId"/>
        <result column="status" property="status"/>
    </resultMap>

    <!-- 新增文章 -->
    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO article (title, content, summary, cover, category_id, author_id, status)
        VALUES (#{title}, #{content}, #{summary}, #{cover}, #{categoryId}, #{authorId}, #{status})
    </insert>

    <!-- 更新文章 -->
    <update id="update">
        <choose>
            <when test="title != null or content != null or summary != null or categoryId != null or status != null">
                UPDATE article
                <set>
                    <if test="title != null">
                        title = #{title},
                    </if>
                    <if test="content != null">
                        content = #{content},
                    </if>
                    <if test="summary != null">
                        summary = #{summary},
                    </if>
                    <if test="cover != null">
                        cover = #{cover},
                    </if>
                    <if test="categoryId != null">
                        category_id = #{categoryId},
                    </if>
                    <if test="status != null">
                        status = #{status},
                    </if>
                </set>
                WHERE id = #{id}
            </when>
            <otherwise>
                UPDATE article SET id = id WHERE id = #{id}
            </otherwise>
        </choose>
    </update>

    <!-- 根据ID删除文章 -->
    <delete id="deleteById">
        DELETE
        FROM article
        WHERE id = #{id}
    </delete>

    <!-- 批量删除文章 -->
    <delete id="batchDelete">
        DELETE FROM article
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <!-- 根据ID查询文章 -->
    <select id="selectById" resultMap="BaseResultMap">
        SELECT *
        FROM article
        WHERE id = #{id}
    </select>

    <!-- 文章分页查询 -->
    <select id="pageQuery" resultMap="BaseResultMap">
        SELECT DISTINCT a.* FROM article a
        <if test="(tagId != null) or (tagIds != null and tagIds.size() > 0)">
            LEFT JOIN article_tag at ON a.id = at.article_id
        </if>
        <where>
            <if test="title != null and title != ''">
                AND a.title LIKE CONCAT('%', #{title}, '%')
            </if>
            <if test="categoryId != null">
                AND a.category_id = #{categoryId}
            </if>
            <if test="tagId != null">
                AND at.tag_id = #{tagId}
            </if>
            <if test="tagIds != null and tagIds.size() > 0">
                AND at.tag_id IN
                <foreach collection="tagIds" item="tagId" open="(" separator="," close=")">
                    #{tagId}
                </foreach>
            </if>
        </where>
        ORDER BY a.id DESC
    </select>

    <!-- 根据分类ID统计文章数量 -->
    <select id="countByCategoryId" resultType="int">
        SELECT COUNT(*) FROM article WHERE category_id = #{categoryId}
    </select>

    <!-- 统计文章总数 -->
    <select id="countArticles" resultType="long">
        SELECT COUNT(*) FROM article
    </select>

    <!-- 统计总浏览量 -->
    <select id="sumViewCount" resultType="long">
        SELECT COALESCE(SUM(view_count), 0) FROM article
    </select>

    <!-- 获取每日文章发布数量 -->
    <select id="getDailyArticleCount" resultType="map">
        SELECT 
            DATE(create_time) as date,
            COUNT(*) as count
        FROM article 
        WHERE DATE(create_time) BETWEEN #{startDate} AND #{endDate}
        GROUP BY DATE(create_time)
        ORDER BY date
    </select>

    <!-- 根据作者ID统计文章数量 -->
    <select id="countByAuthorId" resultType="long">
        SELECT COUNT(*) FROM article WHERE author_id = #{authorId}
    </select>
</mapper>